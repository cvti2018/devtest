//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Devart Entity Developer tool using Entity Framework EntityObject template.
// Code is generated on: 19/04/2018 15:13:19
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using System.Data.Entity.Core.EntityClient;
using System.Data.Entity.Core.Metadata.Edm;
using System.Data.Entity.Core.Objects;
using System.Data.Entity.Core.Objects.DataClasses;

namespace CadastroEpi.Domain.Model
{

    /// <summary>
    /// There are no comments for CadastroEpi.Domain.Model.Epi in the schema.
    /// </summary>
    /// <KeyProperties>
    /// EpiId
    /// </KeyProperties>
    [EdmEntityTypeAttribute(NamespaceName="CadastroEpi.Domain.Model", Name="Epi")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Epi : EntityObject    {
        #region Factory Method

        /// <summary>
        /// Create a new Epi object.
        /// </summary>
        /// <param name="epiId">Initial value of EpiId.</param>
        /// <param name="nomEpi">Initial value of NomEpi.</param>
        /// <param name="datInclusao">Initial value of DatInclusao.</param>
        /// <param name="numCa">Initial value of NumCa.</param>
        /// <param name="cnpjFabricante">Initial value of CnpjFabricante.</param>
        public static Epi CreateEpi(int epiId, string nomEpi, global::System.DateTimeOffset datInclusao, int numCa, string cnpjFabricante)
        {
            Epi epi = new Epi();
            epi.EpiId = epiId;
            epi.NomEpi = nomEpi;
            epi.DatInclusao = datInclusao;
            epi.NumCa = numCa;
            epi.CnpjFabricante = cnpjFabricante;
            return epi;
        }

        #endregion

        #region Properties
    
        /// <summary>
        /// There are no comments for EpiId in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int EpiId
        {
            get
            {
                int value = _EpiId;
                OnGetEpiId(ref value);
                return value;
            }
            set
            {
                if (_EpiId != value)
                {
                  OnEpiIdChanging(ref value);
                  ReportPropertyChanging("EpiId");
                  _EpiId = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("EpiId");
                  OnEpiIdChanged();
              }
            }
        }
        private int _EpiId;
        partial void OnGetEpiId(ref int value);
        partial void OnEpiIdChanging(ref int value);
        partial void OnEpiIdChanged();
    
        /// <summary>
        /// There are no comments for NomEpi in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string NomEpi
        {
            get
            {
                string value = _NomEpi;
                OnGetNomEpi(ref value);
                return value;
            }
            set
            {
                if (_NomEpi != value)
                {
                  OnNomEpiChanging(ref value);
                  ReportPropertyChanging("NomEpi");
                  _NomEpi = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("NomEpi");
                  OnNomEpiChanged();
              }
            }
        }
        private string _NomEpi;
        partial void OnGetNomEpi(ref string value);
        partial void OnNomEpiChanging(ref string value);
        partial void OnNomEpiChanged();
    
        /// <summary>
        /// There are no comments for DatInclusao in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual global::System.DateTimeOffset DatInclusao
        {
            get
            {
                global::System.DateTimeOffset value = _DatInclusao;
                OnGetDatInclusao(ref value);
                return value;
            }
            set
            {
                if (_DatInclusao != value)
                {
                  OnDatInclusaoChanging(ref value);
                  ReportPropertyChanging("DatInclusao");
                  _DatInclusao = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DatInclusao");
                  OnDatInclusaoChanged();
              }
            }
        }
        private global::System.DateTimeOffset _DatInclusao;
        partial void OnGetDatInclusao(ref global::System.DateTimeOffset value);
        partial void OnDatInclusaoChanging(ref global::System.DateTimeOffset value);
        partial void OnDatInclusaoChanged();
    
        /// <summary>
        /// There are no comments for DatValidade in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual global::System.Nullable<System.DateTime> DatValidade
        {
            get
            {
                global::System.Nullable<System.DateTime> value = _DatValidade;
                OnGetDatValidade(ref value);
                return value;
            }
            set
            {
                if (_DatValidade != value)
                {
                  OnDatValidadeChanging(ref value);
                  ReportPropertyChanging("DatValidade");
                  _DatValidade = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("DatValidade");
                  OnDatValidadeChanged();
              }
            }
        }
        private global::System.Nullable<System.DateTime> _DatValidade;
        partial void OnGetDatValidade(ref global::System.Nullable<System.DateTime> value);
        partial void OnDatValidadeChanging(ref global::System.Nullable<System.DateTime> value);
        partial void OnDatValidadeChanged();
    
        /// <summary>
        /// There are no comments for NumCa in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual int NumCa
        {
            get
            {
                int value = _NumCa;
                OnGetNumCa(ref value);
                return value;
            }
            set
            {
                if (_NumCa != value)
                {
                  OnNumCaChanging(ref value);
                  ReportPropertyChanging("NumCa");
                  _NumCa = StructuralObject.SetValidValue(value);
                  ReportPropertyChanged("NumCa");
                  OnNumCaChanged();
              }
            }
        }
        private int _NumCa;
        partial void OnGetNumCa(ref int value);
        partial void OnNumCaChanging(ref int value);
        partial void OnNumCaChanged();
    
        /// <summary>
        /// There are no comments for NumProcesso in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string NumProcesso
        {
            get
            {
                string value = _NumProcesso;
                OnGetNumProcesso(ref value);
                return value;
            }
            set
            {
                if (_NumProcesso != value)
                {
                  OnNumProcessoChanging(ref value);
                  ReportPropertyChanging("NumProcesso");
                  _NumProcesso = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("NumProcesso");
                  OnNumProcessoChanged();
              }
            }
        }
        private string _NumProcesso;
        partial void OnGetNumProcesso(ref string value);
        partial void OnNumProcessoChanging(ref string value);
        partial void OnNumProcessoChanged();
    
        /// <summary>
        /// There are no comments for NomFabricante in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute()]
        [DataMemberAttribute()]
        public virtual string NomFabricante
        {
            get
            {
                string value = _NomFabricante;
                OnGetNomFabricante(ref value);
                return value;
            }
            set
            {
                if (_NomFabricante != value)
                {
                  OnNomFabricanteChanging(ref value);
                  ReportPropertyChanging("NomFabricante");
                  _NomFabricante = StructuralObject.SetValidValue(value, true);
                  ReportPropertyChanged("NomFabricante");
                  OnNomFabricanteChanged();
              }
            }
        }
        private string _NomFabricante;
        partial void OnGetNomFabricante(ref string value);
        partial void OnNomFabricanteChanging(ref string value);
        partial void OnNomFabricanteChanged();
    
        /// <summary>
        /// There are no comments for CnpjFabricante in the schema.
        /// </summary>
        [EdmScalarPropertyAttribute(IsNullable=false)]
        [DataMemberAttribute()]
        public virtual string CnpjFabricante
        {
            get
            {
                string value = _CnpjFabricante;
                OnGetCnpjFabricante(ref value);
                return value;
            }
            set
            {
                if (_CnpjFabricante != value)
                {
                  OnCnpjFabricanteChanging(ref value);
                  ReportPropertyChanging("CnpjFabricante");
                  _CnpjFabricante = StructuralObject.SetValidValue(value, false);
                  ReportPropertyChanged("CnpjFabricante");
                  OnCnpjFabricanteChanged();
              }
            }
        }
        private string _CnpjFabricante;
        partial void OnGetCnpjFabricante(ref string value);
        partial void OnCnpjFabricanteChanging(ref string value);
        partial void OnCnpjFabricanteChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// There are no comments for Funcionarios in the schema.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("CadastroEpi.Domain.Model", "Epi_Funcionario", "Funcionarios")]
        public virtual EntityCollection<Funcionario> Funcionarios
        {
            get
            {
                return ((IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Funcionario>("CadastroEpi.Domain.Model.Epi_Funcionario", "Funcionarios");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Funcionario>("CadastroEpi.Domain.Model.Epi_Funcionario", "Funcionarios", value);
                }
            }
        }

        #endregion
    }

}
